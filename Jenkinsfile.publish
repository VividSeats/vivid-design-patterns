def GIT_CREDENTIALS='github-username-and-token-as-password'

pipeline {
  agent {
    kubernetes {
      label 'vivid-design-patterns-publish'
      idleMinutes 30
      yamlFile 'jenkins/kubernetes/build-pod-publish.yaml'
      defaultContainer 'node'
    }
  }

  parameters {
    choice(choices: ['patch', 'minor', 'major'], description: 'What kind of change are you publishing? Major changes are breaking changes. Minor changes are new features, eg. new components, and patches are bug fixes on components. For more information, visit: https://semver.org/', name: 'SEM_VER_TYPE')
  }

  stages {
    stage('Prepare git repo') {
        steps {
            //sh "git branch -D stage || true"
            //sh "git checkout -b stage"
            sh "echo checkout"
        }
    }

    stage('Install dependencies') {
        steps {
            //sh "yarn install"
            sh 'echo $(date) >> hello.text'
        }
    }

    stage('Publish') {
        steps {
            //sendSlackNotification(buildStatus: "Publishing ${params.SEM_VER_TYPE} update", channel: "#eng-team-web")
            //sh "yarn publish --new-version 0.0.0-fake-deploy7${params.SEM_VER_TYPE} --tag fake-deploy"
            sh "echo publishing to npm"
        }
    }

    stage('Push version change to github') {
      steps {
        withCredentials([
          usernamePassword(
            credentialsId: GIT_CREDENTIALS,
            passwordVariable: 'GITHUB_TOKEN',
            usernameVariable: 'GITHUB_USERNAME')]) {

              sh """
                git config --replace-all user.email ${env.GITHUB_USERNAME}@hypothes.is
                git config --replace-all user.name ${env.GITHUB_USERNAME}
                git config credential.helper store
                echo https://${env.GITHUB_USERNAME}:${env.GITHUB_TOKEN}@github.com >> \$HOME/.git-credentials
              """

              sh "git add --all"
              sh "git commit -m 'add file'"

              sh "git push -u origin stage"
         }
       }
     }
   }

  //post {
  //  always {
  //      script {
  //          sendSlackNotification(buildStatus: currentBuild.currentResult, channel: "#eng-team-web")
  //      }
  //  }
  //}
}
