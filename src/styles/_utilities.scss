$positiveSizes: (
    '2xs' $sizing-2XS,
    'xs' $sizing-XS,
    'sm' $sizing-SM,
    'md' $sizing-MD,
    'lg' $sizing-LG,
    'xl' $sizing-XL,
    '2xl' $sizing-2XL,
    '3xl' $sizing-3XL,
    '4xl' $sizing-4XL,
    '5xl' $sizing-5XL,
    '6xl' $sizing-6XL,
    '100' 100%,
    'n' 0
);
$negativeSizes: (
    'neg-2xs' (-$sizing-2XS),
    'neg-xs' (-$sizing-XS),
    'neg-sm' (-$sizing-SM),
    'neg-md' (-$sizing-MD),
    'neg-lg' (-$sizing-LG),
    'neg-xl' (-$sizing-XL),
    'neg-2xl' (-$sizing-2XL),
    'neg-3xl' (-$sizing-3XL),
    'neg-4xl' (-$sizing-4XL),
    'neg-5xl' (-$sizing-5XL),
    'neg-6xl' (-$sizing-6XL)
);
$layoutUtils: (
    border: (
        bottom,
        left,
        top,
        right
    ),
    display: (
        block,
        inline-block,
        none,
        table,
        table-cell
    ),
    float: (
        left,
        right
    ),
    text-align: (
        center,
        left,
        right
    ),
    vertical-align: (
        bottom,
        middle,
        top
    )
);
$sizingUtils: (
    height,
    line-height,
    margin,
    margin-bottom,
    margin-left,
    margin-right,
    margin-top,
    margin-vert,
    margin-horz,
    padding,
    padding-bottom,
    padding-left,
    padding-right,
    padding-top,
    padding-vert,
    padding-horz,
    width
);
// Custom Naming Classes
// Used for classes that don't follow the pattern of .{propertyFirstLetter}{valueFirstLetter}
$customNamedClasses: (
    background-position: (
        bg-pos-bc 'bottom center',
        bg-pos-cc 'center center',
        bg-pos-tc 'top center'
    ),
    background-repeat: (
        bg-rpt-n 'no-repeat',
        bg-rpt-x 'repeat-x',
        bg-rpt-y 'repeat-y'
    ),
    background-size: (
        bg-sz-a 'auto',
        bg-sz-cv 'cover',
        bg-sz-ct 'contain'
    ),
    border-radius: (
        br-xs $border-radius-XS,
        br-sm $border-radius-SM,
        br-md $border-radius-MD,
        br-lg $border-radius-LG,
        br-xl $border-radius-XL,
        br-round $border-radius-round
    ),
    overflow: (
        ovf-h 'hidden',
        ovf-s 'scroll',
        ovf-v 'visible'
    ),
    position: (
        pos-a 'absolute',
        pos-f 'fixed',
        pos-r 'relative'
    )
);

@function splitCheck($string) {
    $splitInt: str-index($string, '-');
    @if ($splitInt) {
        @return str-slice($string, 0, 1) + str-slice($string, $splitInt + 1, $splitInt + 1);
    } @else {
        @return str-slice($string, 0, 1);
    }
}
@mixin sizingBuilder($util, $sizes, $size, $sizePrefix) {
    @each $value in $sizes {
        $name: $util;
        $sizing: nth($value, 2);
        $splitInt: str-index($util, '-');

        @if (str-index($util, 'horz') or str-index($util, 'vert')) {
            $name: str-slice($util, 0, $splitInt - 1);
        }
        &#{nth($value, 1)}#{$sizePrefix}#{$size} {
            @if (str-index($util, 'horz')) {
                #{$name}-left: #{$sizing} !important;
                #{$name}-right: #{$sizing} !important;
            } @else if (str-index($util, 'vert')) {
                #{$name}-bottom: #{$sizing} !important;
                #{$name}-top: #{$sizing} !important;
            } @else {
                #{$name}: #{$sizing} !important;
            }
        }
    }
}
@mixin utilityBuilder($size: null, $sizePrefix: null) {
    @if $size != null {
        $sizePrefix: '-';
    }
    @each $util, $values in $layoutUtils {
        .#{splitCheck($util)} {
            @each $value in $values {
                &#{splitCheck($value)}#{$sizePrefix}#{$size} {
                    @if ($util == 'border') {
                        @include border(#{$value});
                    } @else {
                        #{$util}: #{$value} !important;
                    }
                }
            }
        }
    }
    @each $util in $sizingUtils {
        .#{splitCheck($util)}- {
            @include sizingBuilder($util, $positiveSizes, $size, $sizePrefix);
            @if (str-index($util, 'margin')) {
                @include sizingBuilder($util, $negativeSizes, $size, $sizePrefix);
            }
        }
    }
    @each $util, $values in $customNamedClasses {
        @each $value in $values {
            .#{nth($value, 1)}#{$sizePrefix}#{$size} {
                #{$util}: #{nth($value, 2)} !important;
            }
        }
    }
}
@include utilityBuilder();
@include size-min-tablet {
    @include utilityBuilder(min-t);
}
@include size-min-desktop {
    @include utilityBuilder(min-d);
}
@include size-min-desktopXL {
    @include utilityBuilder(min-dxl);
}
@include size-only-mobile {
    @include utilityBuilder(m);
}
@include size-only-tablet {
    @include utilityBuilder(t);
}
@include size-only-desktop {
    @include utilityBuilder(d);
}
