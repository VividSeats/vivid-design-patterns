$sizingSizes: (
    '2xs' $sizing-2XS,
    'xs' $sizing-XS,
    'sm' $sizing-SM,
    'md' $sizing-MD,
    'lg' $sizing-LG,
    'xl' $sizing-XL,
    '2xl' $sizing-2XL,
    '3xl' $sizing-3XL,
    '4xl' $sizing-4XL,
    '5xl' $sizing-5XL,
    '6xl' $sizing-6XL,
    '100' 100%,
    'n' 0
);
$layoutUtils: (
    border: (
        bottom,
        left,
        top,
        right
    ),
    display: (
        block,
        inline-block,
        none,
        table,
        table-cell
    ),
    float: (
        left,
        right
    ),
    text-align: (
        center,
        left,
        right
    ),
    vertical-align: (
        bottom,
        middle,
        top
    )
);
$sizingUtils: (
    height,
    line-height,
    margin,
    margin-bottom,
    margin-left,
    margin-right,
    margin-top,
    margin-vert,
    margin-horz,
    padding,
    padding-bottom,
    padding-left,
    padding-right,
    padding-top,
    padding-vert,
    padding-horz,
    width
);
// Custom Naming Classes
// Used for classes that don't follow the pattern of .{propertyFirstLetter}{valueFirstLetter}
@mixin customNamingClasses {
    // Background Position
    .bg-pos-bc {
        background-position: bottom center;
    }
    .bg-pos-cc {
        background-position: center center;
    }
    .bg-pos-tc {
        background-position: top center;
    }
    // Background Repeat
    .bg-rpt-n {
        background-repeat: no-repeat;
    }
    .bg-rpt-x {
        background-repeat: repeat-x;
    }
    .bg-rpt-y {
        background-repeat: repeat-y;
    }
    // Background Size
    .bg-sz-a {
        background-size: auto;
    }
    .bg-sz-cv {
        background-size: cover;
    }
    .bg-sz-ct {
        background-size: contain;
    }
    // Border Radius
    .br-xs {
        border-radius: $border-radius-XS;
    }
    .br-sm {
        border-radius: $border-radius-SM;
    }
    .br-md {
        border-radius: $border-radius-MD;
    }
    .br-lg {
        border-radius: $border-radius-LG;
    }
    .br-xl {
        border-radius: $border-radius-XL;
    }
    .br-round {
        border-radius: $border-radius-round;
    }
    // Overflow
    .ovf-h {
        overflow: hidden !important;
    }
    .ovf-s {
        overflow: scroll !important;
    }
    .ovf-v {
        overflow: visible !important;
    }
    // Position
    .pos-a {
        position: absolute !important;
    }
    .pos-f {
        position: fixed !important;
    }
    .pos-r {
        position: relative !important;
    }
}

@function splitCheck($string) {
    $splitInt: str-index($string, '-');
    @if ($splitInt) {
        @return str-slice($string, 0, 1) + str-slice($string, $splitInt + 1, $splitInt + 1);
    } @else {
        @return str-slice($string, 0, 1);
    }
}
@mixin utilityBuilder($size: null, $sizePrefix: null) {
    @if $size != null {
        $sizePrefix: '-';
    }
    @each $util, $values in $layoutUtils {
        .#{splitCheck($util)} {
            @each $value in $values {
                &#{splitCheck($value)}#{$sizePrefix}#{$size} {
                    @if ($util == 'border') {
                        @include border(#{$value});
                    } @else {
                        #{$util}: #{$value} !important;
                    }
                }
            }
        }
    }
    @each $util in $sizingUtils {
        .#{splitCheck($util)}- {
            @each $value in $sizingSizes {
                $name: $util;
                $spacing: nth($value, 2);
                $splitInt: str-index($util, '-');

                @if (str-index($util, 'horz') or str-index($util, 'vert')) {
                    $name: str-slice($util, 0, $splitInt - 1);
                }
                &#{nth($value, 1)}#{$sizePrefix}#{$size} {
                    @if (str-index($util, 'horz')) {
                        #{$name}-left: #{$spacing};
                        #{$name}-right: #{$spacing};
                    } @else if (str-index($util, 'vert')) {
                        #{$name}-bottom: #{$spacing};
                        #{$name}-top: #{$spacing};
                    } @else {
                        #{$name}: #{$spacing};
                    }
                }
            }
        }
    }
    @include customNamingClasses;
}
@include utilityBuilder();
@include size-min-tablet {
    @include utilityBuilder(min-t);
}
@include size-min-desktop {
    @include utilityBuilder(min-d);
}
@include size-min-desktopXL {
    @include utilityBuilder(min-dxl);
}
@include size-only-mobile {
    @include utilityBuilder(m);
}
@include size-only-tablet {
    @include utilityBuilder(t);
}
@include size-only-desktop {
    @include utilityBuilder(d);
}
